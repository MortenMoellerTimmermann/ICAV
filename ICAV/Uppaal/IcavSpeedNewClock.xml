<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
//HOLDER_NUMBER_OF_CARS
const int C = 4;
typedef int[0, N-1] carID;


chan SyncWithCrashDetector;
chan ChooseSpeed[N], SpeedSet;
chan go;

double global_newSpeed = 0.0, global_currentSpeed = 0.0;
int global_uid = 0;

int currentCar = 0;
int cur = 0;

int SoftCrashDetected = 0;

double ClockTimer = 0.1;
</declaration>
	<template>
		<name>Timer</name>
		<declaration>clock x;
clock y;


</declaration>
		<location id="id0" x="-216" y="16">
			<name x="-192" y="8">Timer</name>
			<label kind="invariant" x="-229" y="42">x &lt;= 1</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-224" y="-112">x == 1</label>
			<label kind="synchronisation" x="-224" y="-97">go!</label>
			<label kind="assignment" x="-224" y="-128">x = 0</label>
			<nail x="-128" y="-64"/>
			<nail x="-296" y="-64"/>
		</transition>
	</template>
	<template>
		<name>Car</name>
		<parameter>const carID uid, int id, int speed, int desiredSpeed, int maxSpeed, int setSpeed</parameter>
		<declaration>// Place local declarations here.
double newSpeed = 0.0;


</declaration>
		<location id="id1" x="-2729" y="-1819">
			<name x="-2737" y="-1861">SetNewSpeed</name>
			<urgent/>
		</location>
		<location id="id2" x="-3366" y="-1819">
			<name x="-3425" y="-1870">Updating</name>
			<urgent/>
		</location>
		<location id="id3" x="-3646" y="-1819">
			<name x="-3669" y="-1870">InitState</name>
		</location>
		<location id="id4" x="-3570" y="-1819">
			<name x="-3610" y="-1870">ChoosingPath</name>
			<urgent/>
		</location>
		<location id="id5" x="-2516" y="-1819">
			<name x="-2551" y="-1861">DoneSetting</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-2618" y="-1810">SpeedSet!</label>
			<label kind="assignment" x="-2618" y="-1793">global_newSpeed = newSpeed,
global_currentSpeed = speed,
global_uid = uid,
currentCar = currentCar + 1</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-3247" y="-1589">setSpeed == 0 &amp;&amp;
cur == uid</label>
			<label kind="assignment" x="-3102" y="-1589">newSpeed = desiredSpeed,
cur = cur + 1</label>
			<nail x="-3323" y="-1547"/>
			<nail x="-2847" y="-1547"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-3510" y="-1819">setSpeed == 1 &amp;&amp;
cur == uid</label>
			<label kind="assignment" x="-3510" y="-1785">cur = cur + 1</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-3510" y="-1844">ChooseSpeed[uid]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-1674">newSpeed = 2.0</label>
			<nail x="-3136" y="-1649"/>
			<nail x="-2907" y="-1649"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-1742">newSpeed = 4.0</label>
			<nail x="-3136" y="-1717"/>
			<nail x="-2907" y="-1717"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-1810">newSpeed = 6.0</label>
			<nail x="-3136" y="-1785"/>
			<nail x="-2907" y="-1785"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-1878">newSpeed = 8.0</label>
			<nail x="-3136" y="-1853"/>
			<nail x="-2907" y="-1853"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-1946">newSpeed = 10.0</label>
			<nail x="-3145" y="-1921"/>
			<nail x="-2907" y="-1921"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-2014">newSpeed = 12.0</label>
			<nail x="-3145" y="-1989"/>
			<nail x="-2907" y="-1989"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-2082">newSpeed = 14.0</label>
			<nail x="-3145" y="-2057"/>
			<nail x="-2915" y="-2057"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3068" y="-2150">newSpeed = 16.0</label>
			<nail x="-3145" y="-2125"/>
			<nail x="-2915" y="-2125"/>
		</transition>
	</template>
	<template>
		<name>Updater</name>
		<declaration>//Indexes in the three arrays represents a car. So posx[0], posy[0] and route[0] is car 0. 

int length[N] = //HOLDER_CAR_LENGTH
int width[N] = //HOLDER_CAR_WIDTH
double posx[N] = //HOLDER_CAR_POSX
double posy[N] = //HOLDER_CAR_POSY
double prevPosX[N];
double prevPosY[N];
double distance[N] ;
int route[N] = //HOLDER_CAR_ROUTE
int decel[N] = //HOLDER_CAR_DECEL
int accel[N] = //HOLDER_CAR_ACCEL
double stopDistance[N];
double newSpeed[N];
double currentSpeed[N];
int done[N];
int index = 0;
int AllDone = 0;
int gapDistance = 3;
int minorGap = 0;
int CarOneCrash = 0;
int CarTwoCrash = 0;

int CPCoodinates[C*2] = {495, 505, 505, 505, 505, 495, 495, 495};

int CrashDetected = 0;

typedef struct {
    int x;
    int y;
} point;

typedef struct {
    int CarOne;
    int CarTwo;
} CrashingCars;

point CPs[4];

void Constructor(){
    int i = 0, index = 0;
    point p;
    for(i = 0; i &lt; C ; i++){
        p.x = CPCoodinates[index++];
        p.y = CPCoodinates[index++];
        CPs[i] = p;
    }

    for(i = 0; i &lt; N; i++){
        prevPosX[i] = posx[i];
        prevPosY[i] = posy[i];
        if(route[i] == 12){
            distance[i] = posy[i] - 500;
        }
        else if(route[i]  == 21){
            distance[i] = 500 - posy[i];
        }
        else if(route[i]  == 34){
            distance[i]  = posx[i] - 500;
        }
        else if(route[i]  == 43){
            distance[i]  = 500 - posx[i];
        }

    }
}



void UpdatePos(){
    int i = 0, j = 0;
    int checker = 1;
    for(i = 0; i &lt; N; i++){
        if(done[i] == 0){
            stopDistance[i] = (currentSpeed[i]/2) + 1;
            distance[i] = distance[i] - currentSpeed[i];
            if(route[i] == 12){
                prevPosY[i] = posy[i];
                posy[i] = posy[i] - (currentSpeed[i] * ClockTimer);
            }
            else if(route[i] == 21){
                prevPosY[i] = posy[i];
                posy[i] = posy[i] + (currentSpeed[i] * ClockTimer);
            }
            else if(route[i] == 34){
                prevPosX[i] = posx[i];
                posx[i] = posx[i] - (currentSpeed[i] * ClockTimer);
            }
            else if(route[i] == 43){
                prevPosX[i] = posx[i];
                posx[i] = posx[i] + (currentSpeed[i] * ClockTimer);
            }
            if(distance[i] &lt; -140){
                done[i] = 1;
            }
        }
    }
    for(j = 0; j &lt; N; j++){
        if(done[j] == 0){
            checker = 0;
        }
    }
    AllDone = checker;
}

void CheckSpeedUpdate(){
    int i = 0;
    for(i = 0; i &lt; N; i++){
        if(currentSpeed[i] &lt; newSpeed[i]){
            if((currentSpeed[i] + (accel[i] * ClockTimer)) &lt; newSpeed[i]){
                currentSpeed[i] = currentSpeed[i] + (accel[i] * ClockTimer);
            }
            else{
                currentSpeed[i] = newSpeed[i];
            }
        }
        if(currentSpeed[i] &gt;= newSpeed[i]){
            if((currentSpeed[i] - (decel[i] * ClockTimer)) &gt; newSpeed[i]){
                currentSpeed[i] = currentSpeed[i] - (decel[i] * ClockTimer);
            }
            else{
                currentSpeed[i] = newSpeed[i];
            }
        }
    }
}

void CheckForCrashes(){
    int i = 0, j = 0, k = 0, positive = 0;
    int highestSpeedID = 0, highestSpeed = 0;
    double delta = 0.1;
    double i_bottom_right_caronly_x, i_bottom_right_caronly_y, i_top_left_caronly_x, i_top_left_caronly_y;
    double j_bottom_right_caronly_x, j_bottom_right_caronly_y, j_top_left_caronly_x, j_top_left_caronly_y;
    bool CrashAlreadyDetected = false;

    for(i = 0; i &lt; N; i++){
		if(route[i] == 12){
			i_bottom_right_caronly_y = posy[i] - gapDistance - delta;
			i_bottom_right_caronly_x =  posx[i] + delta + (width[i] / 2); 
			i_top_left_caronly_y = prevPosY[i] + length[i] + delta + minorGap;
			i_top_left_caronly_x =  prevPosX[i] - delta - (width[i] / 2); 
		}
		else if(route[i] == 21){
			i_bottom_right_caronly_y = prevPosY[i] - length[i] - delta - gapDistance;
			i_bottom_right_caronly_x =  prevPosX[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_y = posy[i] + minorGap + delta;
			i_top_left_caronly_x =  posx[i] - (width[i] / 2) - delta; 
		}
		else if(route[i] == 34){
			i_bottom_right_caronly_y =  prevPosY[i] - (width[i] / 2) - delta; 
			i_bottom_right_caronly_x = prevPosX[i] + length[i] + delta + gapDistance;
			i_top_left_caronly_y =  posy[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_x = posx[i] - minorGap - delta;
		}
		else if(route[i] == 43){
			i_bottom_right_caronly_y =  posy[i] - (width[i] / 2) - delta; 
			i_bottom_right_caronly_x = posx[i] + gapDistance + delta;
			i_top_left_caronly_y =  prevPosY[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_x = prevPosX[i] - length[i] - delta - minorGap;
		}

        for(j = 0; j &lt; N; j++){
             //Skips the same car and duplicates
            if(i &lt; j &amp;&amp; done[i] == 0 &amp;&amp; done[j] == 0){
                CrashAlreadyDetected = false;

				if(route[j] == 12){
					j_bottom_right_caronly_y = posy[j] - gapDistance - delta;
					j_bottom_right_caronly_x =  posx[j] + delta + (width[j] / 2); 
					j_top_left_caronly_y = prevPosY[j] + length[j] + delta + minorGap;
					j_top_left_caronly_x =  prevPosX[j] - (width[j] / 2) - delta; 
				}
				else if(route[j] == 21){
					j_bottom_right_caronly_y = prevPosY[j] - length[i] - delta - gapDistance;
					j_bottom_right_caronly_x =  prevPosX[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_y = posy[j] + minorGap + delta;
					j_top_left_caronly_x =  posx[j] - (width[j] / 2) - delta; 
				}
				else if(route[j] == 34){
					j_bottom_right_caronly_y =  prevPosY[j] - (width[j] / 2) - delta; 
					j_bottom_right_caronly_x = prevPosX[j] + length[j] + delta + gapDistance;
					j_top_left_caronly_y =  posy[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_x = posx[j] - minorGap - delta;
				}  
				else if(route[j] == 43){
					j_bottom_right_caronly_y =  posy[j] - (width[j] / 2) - delta; 
					j_bottom_right_caronly_x = posx[j] + gapDistance + delta;
					j_top_left_caronly_y =  prevPosY[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_x = prevPosX[j] - length[j] - delta - minorGap;
				}

				if((i_top_left_caronly_x &gt; j_bottom_right_caronly_x) || (j_top_left_caronly_x &gt; i_bottom_right_caronly_x)){
					CrashDetected += 0;
				}
				else if((i_top_left_caronly_y &lt; j_bottom_right_caronly_y) || (j_top_left_caronly_y &lt; i_bottom_right_caronly_y)){
					CrashDetected += 0;
				}
				else {
					if(CrashAlreadyDetected == false){
						CarOneCrash = i;
						CarTwoCrash = j;
						CrashDetected += 1;
					}
					CrashAlreadyDetected = true;
				}
            }            
        }
    }
}

void SyncCarSpeed(){
    newSpeed[global_uid] = global_newSpeed;
    currentSpeed[global_uid] = global_currentSpeed;
}
</declaration>
		<location id="id6" x="-552" y="-42">
			<name x="-518" y="-25">WaitingForSpeeds</name>
			<urgent/>
		</location>
		<location id="id7" x="-552" y="-144">
			<name x="-603" y="-187">CarSettingSpeed</name>
		</location>
		<location id="id8" x="-552" y="144">
			<name x="-544" y="102">CheckCrash</name>
			<urgent/>
		</location>
		<location id="id9" x="-272" y="144">
			<name x="-306" y="102">UpdateSpeed</name>
			<urgent/>
		</location>
		<location id="id10" x="-43" y="144">
			<name x="-102" y="102">UpdatePosition</name>
			<urgent/>
		</location>
		<location id="id11" x="178" y="340">
			<name x="212" y="332">End</name>
		</location>
		<location id="id12" x="178" y="144">
			<name x="136" y="102">CheckDone</name>
		</location>
		<location id="id13" x="-722" y="-42">
			<name x="-748" y="-25">InitState</name>
			<committed/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="assignment" x="-663" y="-34">Constructor()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="guard" x="-255" y="348">AllDone == 0</label>
			<label kind="synchronisation" x="-196" y="323">go?</label>
			<nail x="-68" y="306"/>
			<nail x="-348" y="306"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="assignment" x="-9" y="153">UpdatePos()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="195" y="212">AllDone == 1</label>
			<label kind="synchronisation" x="195" y="238">go?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="-238" y="153">CheckSpeedUpdate()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-450" y="153">CheckForCrashes()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-518" y="34">currentCar == N</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-731" y="-110">SpeedSet?</label>
			<label kind="assignment" x="-765" y="-85">SyncCarSpeed()</label>
			<nail x="-646" y="-102"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-425" y="-85">currentCar &lt; N</label>
			<label kind="synchronisation" x="-425" y="-110">ChooseSpeed[currentCar]!</label>
			<nail x="-450" y="-102"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

const int pid[N] = //HOLDER_CAR_PID 
const int speed[N] = //HOLDER_CAR_SPEED
const int desiredSpeed[N] = //HOLDER_CAR_DESIREDSPEED
const int maxSpeed[N] = //HOLDER_CAR_MAXSPEED
const int setSpeed[N] = //HOLDER_CAR_SETSPEED



Cars(const int[0,N-1] id) = Car(id, pid[id], speed[id], desiredSpeed[id], maxSpeed[id], setSpeed[id]);

system Cars, Timer, Updater;

</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>

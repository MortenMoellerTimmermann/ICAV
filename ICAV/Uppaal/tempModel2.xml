<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 13;

const int C = 4;
typedef int[0, N-1] carID;

broadcast chan SyncWithCrashDetector;
broadcast chan go;

int global_posx = 0, global_posy = 0, global_length = 0, global_width = 0, global_stopDistance = 0, global_speed = 0, global_done = 0;
int global_route = 0, global_uid = 0;

int totalSpeed = 0;
int newSpeeds[N];

int SoftCrashDetected = 0;</declaration>
	<template>
		<name x="5" y="5">OldCar</name>
		<parameter>int id, int speed, int posx, int posy, int route</parameter>
		<declaration>// Place local declarations here.
//int distanceToMid = sqrt((posx * posx) +(posy * posy));
int distanceToMid = 0;
int carSpeed = 0;
int done = 0;

void Constructor(){
	distanceToMid = route &lt; 34 ? posx : posy;
	carSpeed = speed;
}


void UpdatePos(){
	distanceToMid = distanceToMid - (carSpeed * 2);
       if(distanceToMid &lt; -100){
		done = 1;
	}
}

</declaration>
		<location id="id0" x="-376" y="16">
			<name x="-392" y="40">initState</name>
			<committed/>
		</location>
		<location id="id1" x="-200" y="184">
			<name x="-176" y="176">End</name>
		</location>
		<location id="id2" x="248" y="240">
			<name x="224" y="200">Fifteen</name>
			<urgent/>
		</location>
		<location id="id3" x="432" y="16">
			<name x="464" y="40">Speed_Updated</name>
			<urgent/>
		</location>
		<location id="id4" x="248" y="168">
			<name x="224" y="128">Twelve</name>
			<urgent/>
		</location>
		<location id="id5" x="248" y="96">
			<name x="232" y="56">Nine</name>
			<urgent/>
		</location>
		<location id="id6" x="248" y="16">
			<name x="240" y="-24">Six</name>
			<urgent/>
		</location>
		<location id="id7" x="248" y="-56">
			<name x="224" y="-96">Three</name>
			<urgent/>
		</location>
		<location id="id8" x="248" y="-128">
			<name x="232" y="-168">Stop</name>
			<urgent/>
		</location>
		<location id="id9" x="-32" y="16">
			<name x="-144" y="40">Updating_Speed</name>
			<urgent/>
		</location>
		<location id="id10" x="-200" y="16">
			<name x="-184" y="-24">Ready</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id10"/>
			<target ref="id1"/>
			<label kind="guard" x="-280" y="96">done == 1</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id10"/>
			<label kind="assignment" x="-336" y="-16">Constructor()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="216">carSpeed = 15</label>
			<nail x="432" y="240"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="guard" x="0" y="208">carSpeed &gt;= 12</label>
			<nail x="-32" y="240"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id10"/>
			<label kind="assignment" x="136" y="-248">UpdatePos()</label>
			<nail x="568" y="16"/>
			<nail x="568" y="-216"/>
			<nail x="-200" y="-216"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="144">carSpeed = 12</label>
			<nail x="432" y="168"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="72">carSpeed = 9</label>
			<nail x="432" y="96"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="-8">carSpeed = 6</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="-88">carSpeed = 3</label>
			<nail x="432" y="-56"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="assignment" x="312" y="-160">carSpeed = 0</label>
			<nail x="432" y="-128"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="guard" x="0" y="-16">carSpeed &gt;= 3 &amp;&amp; carSpeed &lt;=9</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="0" y="-88">carSpeed &lt;= 6</label>
			<nail x="-32" y="-56"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="guard" x="-8" y="64">carSpeed &gt;= 6 &amp;&amp; carSpeed &lt;=12</label>
			<nail x="-32" y="96"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id4"/>
			<label kind="guard" x="0" y="136">carSpeed &gt;= 9</label>
			<nail x="-32" y="168"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="0" y="-160">carSpeed == 3</label>
			<nail x="-32" y="-128"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-104" y="-24">go?</label>
		</transition>
	</template>
	<template>
		<name>Timer</name>
		<declaration>clock x;
clock y;


</declaration>
		<location id="id11" x="-216" y="16">
			<name x="-192" y="8">Timer</name>
			<label kind="invariant" x="-232" y="40">x &lt;= 1</label>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-224" y="-112">x == 1</label>
			<label kind="synchronisation" x="-224" y="-97">go!</label>
			<label kind="assignment" x="-224" y="-128">x = 0</label>
			<nail x="-128" y="-64"/>
			<nail x="-296" y="-64"/>
		</transition>
	</template>
	<template>
		<name>Car</name>
		<parameter>const carID uid, int id, int speed, int length, int width, int posx, int posy, int distance ,int route, int decel, int accel, int desiredSpeed, int setSpeed</parameter>
		<declaration>// Place local declarations here.
int currentSpeed = 0;
int newSpeed = 0;
int done = 0;
int distanceToMid = 0;

void Constructor(){
	distanceToMid = distance;
	currentSpeed = speed;
}


void UpdatePos(){
    distanceToMid = distanceToMid - currentSpeed;
    if(route == 12){
        posy = posy - currentSpeed;
    }
    else if(route == 21){
        posy = posy + currentSpeed;
    }
    else if(route == 34){
        posx = posx - currentSpeed;
    }
    else if(route == 43){
        posx = posx + currentSpeed;
    }
    if(distanceToMid &lt; -100){
        done = 1;
    }
}

void StopDistance(){
    //global_stopDistance =  currentSpeed * 1 + ((0 - (currentSpeed * currentSpeed)) / (2 * (-1 * decel))); 
    global_stopDistance = (currentSpeed/2) + 1;
}

void CheckSpeedUpdate(){
	if(currentSpeed &lt; newSpeed){
		if((currentSpeed + accel) &lt; newSpeed){
			currentSpeed = currentSpeed + accel;
		}
		else{
			currentSpeed = newSpeed;
		}
	}
	if(currentSpeed &gt; newSpeed){
		if((currentSpeed - decel) &gt; newSpeed){
			currentSpeed = currentSpeed - decel;
		}
		else{
			currentSpeed = newSpeed;
		}
	}
}


</declaration>
		<location id="id12" x="-1623" y="-1819">
			<name x="-1591" y="-1827">Waiting</name>
		</location>
		<location id="id13" x="-1623" y="-1667">
			<name x="-1591" y="-1683">End</name>
		</location>
		<location id="id14" x="-2124" y="-1820">
			<name x="-2164" y="-1804">UpdateSpeed</name>
			<urgent/>
		</location>
		<location id="id15" x="-2393" y="-1816">
			<name x="-2369" y="-1808">SetNewSpeed</name>
			<urgent/>
		</location>
		<location id="id16" x="-2953" y="-1816">
			<name x="-3025" y="-1864">Updating</name>
			<urgent/>
		</location>
		<location id="id17" x="-3300" y="-1819">
			<name x="-3316" y="-1867">Ready</name>
		</location>
		<location id="id18" x="-3468" y="-1819">
			<name x="-3492" y="-1867">initState</name>
			<urgent/>
		</location>
		<location id="id19" x="-1912" y="-1820">
			<name x="-1963" y="-1794">SyncWithCrash</name>
			<urgent/>
		</location>
		<location id="id20" x="-3122" y="-1819">
			<name x="-3162" y="-1870">ChoosingPath</name>
			<urgent/>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id20"/>
			<target ref="id15"/>
			<label kind="guard" x="-2813" y="-1428">setSpeed == 0</label>
			<label kind="assignment" x="-2711" y="-1428">newSpeed = desiredSpeed</label>
			<nail x="-3128" y="-1402"/>
			<nail x="-2397" y="-1402"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id16"/>
			<label kind="guard" x="-3077" y="-1793">setSpeed == 1</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-3232" y="-1802">go?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1496">newSpeed = 1</label>
			<nail x="-2958" y="-1470"/>
			<nail x="-2397" y="-1470"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1547">newSpeed = 2</label>
			<nail x="-2958" y="-1521"/>
			<nail x="-2397" y="-1521"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1597">newSpeed = 3</label>
			<nail x="-2958" y="-1572"/>
			<nail x="-2397" y="-1572"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1649">newSpeed = 4</label>
			<nail x="-2958" y="-1623"/>
			<nail x="-2397" y="-1623"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1700">newSpeed = 5</label>
			<nail x="-2958" y="-1674"/>
			<nail x="-2397" y="-1674"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1768">newSpeed = 6</label>
			<nail x="-2958" y="-1734"/>
			<nail x="-2397" y="-1734"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1844">newSpeed = 7</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1912">newSpeed = 8</label>
			<nail x="-2949" y="-1887"/>
			<nail x="-2388" y="-1887"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-1963">newSpeed = 9</label>
			<nail x="-2949" y="-1938"/>
			<nail x="-2388" y="-1938"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2014">newSpeed = 10</label>
			<nail x="-2949" y="-1989"/>
			<nail x="-2388" y="-1989"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2065">newSpeed = 11</label>
			<nail x="-2949" y="-2040"/>
			<nail x="-2388" y="-2040"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2125">newSpeed = 12</label>
			<nail x="-2949" y="-2099"/>
			<nail x="-2388" y="-2099"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2184">newSpeed = 13</label>
			<nail x="-2949" y="-2159"/>
			<nail x="-2388" y="-2159"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2235">newSpeed = 14</label>
			<nail x="-2949" y="-2210"/>
			<nail x="-2388" y="-2210"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2286">newSpeed = 15</label>
			<nail x="-2949" y="-2261"/>
			<nail x="-2388" y="-2261"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-2720" y="-2346">newSpeed = 16</label>
			<nail x="-2949" y="-2312"/>
			<nail x="-2388" y="-2312"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1844" y="-1615">SyncWithCrashDetector!</label>
			<label kind="assignment" x="-1844" y="-1794">global_posx = posx,
global_posy = posy,
global_length = length,
global_width = width,
global_route = route,
global_uid = uid,
global_speed = currentSpeed,
global_done = done,
StopDistance()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id19"/>
			<label kind="assignment" x="-2082" y="-1777">UpdatePos()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id15"/>
			<label kind="guard" x="-2031" y="-1964">done == 0</label>
			<label kind="synchronisation" x="-2031" y="-1947">go?</label>
			<nail x="-2014" y="-1905"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-1591" y="-1763">done == 1</label>
			<label kind="synchronisation" x="-1591" y="-1739">go?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="assignment" x="-2328" y="-1777">CheckSpeedUpdate()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-3435" y="-1609">SyncWithCrashDetector!</label>
			<label kind="assignment" x="-3434" y="-1806">Constructor(),
global_posx = posx,
global_posy = posy,
global_length = length,
global_width = width,
global_route = route,
global_uid = uid,
global_speed = currentSpeed,
global_done = done,
StopDistance()</label>
		</transition>
	</template>
	<template>
		<name>CrashDetector</name>
		<declaration>//Indexes in the three arrays represents a car. So posx[0], posy[0] and route[0] is car 0. 
int posx[N];
int posy[N];
int length[N];
int width[N];
int route[N];
int stopDistance[N];
int speed[N];
int done[N];
int index = 0;
int CPCoodinates[C*2] = {495, 505, 505, 505, 505, 495, 495, 495};

int CrashDetected = 0;

typedef struct {
    int x;
    int y;
} point;

typedef struct {
    int CarOne;
    int CarTwo;
} CrashingCars;

point CPs[4];

void Constructor(){
    int i = 0, index = 0;
    point p;
    for(i = 0; i &lt; C ; i++){
        p.x = CPCoodinates[index++];
        p.y = CPCoodinates[index++];
        CPs[i] = p;
    }
}

void CheckForCrashes(){
    int i = 0, j = 0, k = 0, positive = 0;
    int highestSpeedID = 0, highestSpeed = 0;
    double i_speedDif = 0.0, j_speedDif = 0.0; 
    double i_bottom_right_x, i_bottom_right_y, i_top_left_x, i_top_left_y, i_bottom_right_caronly_x, i_bottom_right_caronly_y, i_top_left_caronly_x, i_top_left_caronly_y;
    double j_bottom_right_x, j_bottom_right_y, j_top_left_x, j_top_left_y, j_bottom_right_caronly_x, j_bottom_right_caronly_y, j_top_left_caronly_x, j_top_left_caronly_y;
    bool SoftCrashAlreadyDetected = false, CrashAlreadyDetected = false;

    for(i = 0; i &lt; N; i++){
        for(j = 0; j &lt; N; j++){
             //Skips the same car and duplicates
            if(i &lt; j &amp;&amp; done[i] == 0 &amp;&amp; done[j] == 0){
                SoftCrashAlreadyDetected = false;
                CrashAlreadyDetected = false;
                if(speed[i] &gt; speed[j]){
                    j_speedDif = speed[j] / speed[i];
                    i_speedDif = 1;
                    highestSpeed = speed[i];
                }
                else{
                    i_speedDif = speed[i] / speed[j];
                    j_speedDif = 1;
                    highestSpeed = speed[j];
                }

                for(k = 0; k &lt;= highestSpeed; k++){
                    if(route[i] == 12){
                         i_bottom_right_y = posy[i] - stopDistance[i] - (k * i_speedDif);
                         i_bottom_right_x =  posx[i] + (width[i] / 2); 
                         i_top_left_y = posy[i] + length[i] - (k * i_speedDif);
                         i_top_left_x =  posx[i] - (width[i] / 2); 

                        i_bottom_right_caronly_y = posy[i] - (k * i_speedDif);
                        i_bottom_right_caronly_x =  posx[i] + (width[i] / 2); 
                        i_top_left_caronly_y = posy[i] + length[i] - (k * i_speedDif);
                        i_top_left_caronly_x =  posx[i] - (width[i] / 2); 
                    }
                    else if(route[i] == 21){
                         i_bottom_right_y = posy[i] - length[i] + (k * i_speedDif);
                         i_bottom_right_x =  posx[i] + (width[i] / 2); 
                         i_top_left_y = posy[i] + stopDistance[i] + (k * i_speedDif);
                         i_top_left_x =  posx[i] - (width[i] / 2); 

                        i_bottom_right_caronly_y = posy[i] - length[i] + (k * i_speedDif);
                        i_bottom_right_caronly_x =  posx[i] + (width[i] / 2); 
                        i_top_left_caronly_y = posy[i] + (k * i_speedDif);
                        i_top_left_caronly_x =  posx[i] - (width[i] / 2); 
                    }
                    else if(route[i] == 34){
                         i_bottom_right_y =  posy[i] - (width[i] / 2); 
                         i_bottom_right_x = posx[i] + length[i] - (k * i_speedDif);
                         i_top_left_y =  posy[i] + (width[i] / 2); 
                         i_top_left_x = posx[i] - stopDistance[i] - (k * i_speedDif);

                        i_bottom_right_caronly_y =  posy[i] - (width[i] / 2); 
                        i_bottom_right_caronly_x = posx[i] + length[i] - (k * i_speedDif);
                        i_top_left_caronly_y =  posy[i] + (width[i] / 2); 
                        i_top_left_caronly_x = posx[i] - (k * i_speedDif);
                    }
                    else if(route[i] == 43){
                         i_bottom_right_y =  posy[i] - (width[i] / 2); 
                         i_bottom_right_x = posx[i] + stopDistance[i] + (k * i_speedDif);
                         i_top_left_y =  posy[i] + (width[i] / 2); 
                         i_top_left_x = posx[i] - length[i] + (k * i_speedDif);

                        i_bottom_right_caronly_y =  posy[i] - (width[i] / 2); 
                        i_bottom_right_caronly_x = posx[i] + (k * i_speedDif);
                        i_top_left_caronly_y =  posy[i] + (width[i] / 2); 
                        i_top_left_caronly_x = posx[i] - length[i] + (k * i_speedDif);
                    }

                    if(route[j] == 12){
                         j_bottom_right_y = posy[j] - stopDistance[i] - (k * j_speedDif);
                         j_bottom_right_x =  posx[j] + (width[j] / 2); 
                         j_top_left_y = posy[j] + length[j] - (k * j_speedDif);
                         j_top_left_x =  posx[j] - (width[j] / 2); 

                        j_bottom_right_caronly_y = posy[j] - (k * j_speedDif);
                        j_bottom_right_caronly_x =  posx[j] + (width[j] / 2); 
                        j_top_left_caronly_y = posy[j] + length[j]  - (k * j_speedDif);
                        j_top_left_caronly_x =  posx[j] - (width[j] / 2); 
                    }
                    else if(route[j] == 21){
                         j_bottom_right_y = posy[j] - length[i] + (k * j_speedDif);;
                         j_bottom_right_x =  posx[j] + (width[j] / 2); 
                         j_top_left_y = posy[j] + stopDistance[i] + (k * j_speedDif);;
                         j_top_left_x =  posx[j] - (width[j] / 2); 

                        j_bottom_right_caronly_y = posy[j] - length[i] + (k * j_speedDif);
                        j_bottom_right_caronly_x =  posx[j] + (width[j] / 2); 
                        j_top_left_caronly_y = posy[j] + (k * j_speedDif);
                        j_top_left_caronly_x =  posx[j] - (width[j] / 2); 
                    }
                    else if(route[j] == 34){
                         j_bottom_right_y =  posy[j] - (width[j] / 2); 
                         j_bottom_right_x = posx[j] + length[j] - (k * j_speedDif);
                         j_top_left_y =  posy[j] + (width[j] / 2); 
                         j_top_left_x = posx[j] - stopDistance[j] - (k * j_speedDif);

                        j_bottom_right_caronly_y =  posy[j] - (width[j] / 2); 
                        j_bottom_right_caronly_x = posx[j] + length[j] - (k * j_speedDif);
                        j_top_left_caronly_y =  posy[j] + (width[j] / 2); 
                        j_top_left_caronly_x = posx[j] - (k * j_speedDif);
                    }  
                    else if(route[j] == 43){
                         j_bottom_right_y =  posy[j] - (width[j] / 2); 
                         j_bottom_right_x = posx[j] + stopDistance[j] + (k * j_speedDif);
                         j_top_left_y =  posy[j] + (width[j] / 2); 
                         j_top_left_x = posx[j] - length[j] + (k * j_speedDif);

                        j_bottom_right_caronly_y =  posy[j] - (width[j] / 2); 
                        j_bottom_right_caronly_x = posx[j] + (k * j_speedDif);
                        j_top_left_caronly_y =  posy[j] + (width[j] / 2); 
                        j_top_left_caronly_x = posx[j] - length[j] + (k * j_speedDif);
                    }
                    //L er back og R er front
                    if((i_top_left_x &gt; j_bottom_right_x) || (j_top_left_x &gt; i_bottom_right_x)){
                         SoftCrashDetected += 0;
                    }
                    else if((i_top_left_y &lt; j_bottom_right_y) || (j_top_left_y &lt; i_bottom_right_y)){
                         SoftCrashDetected += 0;
                    }
                    else {
                         if(SoftCrashAlreadyDetected == false){
                             SoftCrashDetected += 1;
                         }
                         SoftCrashAlreadyDetected = true;
                    }

                    if((i_top_left_caronly_x &gt; j_bottom_right_caronly_x) || (j_top_left_caronly_x &gt; i_bottom_right_caronly_x)){
                        CrashDetected += 0;
                    }
                    else if((i_top_left_caronly_y &lt; j_bottom_right_caronly_y) || (j_top_left_caronly_y &lt; i_bottom_right_caronly_y)){
                        CrashDetected += 0;
                    }
                    else {
                        if(CrashAlreadyDetected == false){
                            CrashDetected += 1;
                        }
                        CrashAlreadyDetected = true;
                    }
                 }                              
            }            
        }
    }
}

void SyncArrays(){
    int i = 0;
    while(i &lt; global_uid){
        i++;
    }
    posx[i] = global_posx;
    posy[i] = global_posy;
    length[i] = global_length;
    width[i] = global_width;
    route[i] = global_route;
    speed[i] = global_speed;
    done[i] = global_done;
    stopDistance[i] = global_stopDistance;
}
</declaration>
		<location id="id21" x="0" y="0">
			<name x="34" y="-8">Ready</name>
		</location>
		<location id="id22" x="-178" y="0">
			<name x="-188" y="-34">InitState</name>
			<committed/>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="assignment" x="-136" y="8">Constructor()</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="34" y="170">go?</label>
			<label kind="assignment" x="-68" y="144">CheckForCrashes()</label>
			<nail x="-85" y="128"/>
			<nail x="76" y="128"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-93" y="-187">SyncWithCrashDetector?</label>
			<label kind="assignment" x="-93" y="-170">SyncArrays()</label>
			<nail x="93" y="-127"/>
			<nail x="-93" y="-127"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

const int pid[N] = {0,1,3,5,3,4,9,4,2,7,1,6,1}; 
const int speed[N] = {17,15,16,16,16,16,16,16,16,15,16,16,16};
const int length[N] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
const int width[N] = {2,2,2,2,2,2,2,2,2,2,2,2,2};
const int posx[N] = {502,628,417,498,402,609,498,393,502,605,498,502,536};
const int posy[N] = {371,502,498,534,502,498,589,498,580,502,395,458,498};
const int distance[N] = {129,128,83,34,98,109,89,107,80,105,105,42,36}; 
const int route[N] = {21,34,43,12,34,43,12,43,21,34,12,21,43};
const int decel[N] = {5,5,5,5,5,5,5,5,5,5,5,5,5};
const int accel[N] = {1,1,1,1,1,1,1,1,1,1,1,1,1};
const int desiredSpeed[N] = {0,0,16,16,16,16,16,16,16,16,16,16,16};
const int setSpeed[N] = {1,1,0,0,0,0,0,0,0,0,0,0,0};

Cars(const int[0,N-1] id) = Car(id, pid[id], speed[id], length[id], width[id], posx[id], posy[id], distance[id], route[id], decel[id], accel[id], desiredSpeed[id], setSpeed[id]);

system Cars, Timer, CrashDetector;

</system>
	<queries>
		<query>
			<formula>E&lt;&gt; forall(i:carID) Cars(i).End &amp;&amp; CrashDetector.CrashDetected == 0</formula>
			<comment></comment>
		</query>
	</queries>
</nta>

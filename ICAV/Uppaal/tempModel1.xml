<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 34;

const int C = 4;
typedef int[0, N-1] carID;


chan SyncWithCrashDetector;
chan ChooseSpeed[N], SpeedSet;
chan go;

int global_newSpeed = 0, global_currentSpeed = 0;
int global_uid = 0;

int currentCar = 0;
int cur = 0;

int SoftCrashDetected = 0;

int ClockScaler = 10;
</declaration>
	<template>
		<name>Timer</name>
		<declaration>clock x;
clock y;


</declaration>
		<location id="id0" x="-216" y="16">
			<name x="-192" y="8">Timer</name>
			<label kind="invariant" x="-229" y="42">x &lt;= 1</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-224" y="-112">x == 1</label>
			<label kind="synchronisation" x="-224" y="-97">go!</label>
			<label kind="assignment" x="-224" y="-128">x = 0</label>
			<nail x="-128" y="-64"/>
			<nail x="-296" y="-64"/>
		</transition>
	</template>
	<template>
		<name>Car</name>
		<parameter>const carID uid, int id, int speed, int desiredSpeed, int maxSpeed, int setSpeed</parameter>
		<declaration>// Place local declarations here.
int newSpeed = 0;


</declaration>
		<location id="id1" x="-2729" y="-1819">
			<name x="-2737" y="-1861">SetNewSpeed</name>
			<urgent/>
		</location>
		<location id="id2" x="-3366" y="-1819">
			<name x="-3425" y="-1870">Updating</name>
			<urgent/>
		</location>
		<location id="id3" x="-3646" y="-1819">
			<name x="-3669" y="-1870">InitState</name>
		</location>
		<location id="id4" x="-3570" y="-1819">
			<name x="-3610" y="-1870">ChoosingPath</name>
			<urgent/>
		</location>
		<location id="id5" x="-2516" y="-1819">
			<name x="-2551" y="-1861">DoneSetting</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-2618" y="-1810">SpeedSet!</label>
			<label kind="assignment" x="-2618" y="-1793">global_newSpeed = newSpeed,
global_currentSpeed = speed,
global_uid = uid,
currentCar = currentCar + 1</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-3247" y="-1589">setSpeed == 0 &amp;&amp;
cur == uid</label>
			<label kind="assignment" x="-3102" y="-1589">newSpeed = desiredSpeed,
cur = cur + 1</label>
			<nail x="-3323" y="-1547"/>
			<nail x="-2847" y="-1547"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-3510" y="-1819">setSpeed == 1 &amp;&amp;
cur == uid</label>
			<label kind="assignment" x="-3510" y="-1785">cur = cur + 1</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-3510" y="-1844">ChooseSpeed[uid]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-1674">newSpeed = (2 * ClockScaler)</label>
			<nail x="-3136" y="-1649"/>
			<nail x="-2907" y="-1649"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-1742">newSpeed = (4 * ClockScaler)</label>
			<nail x="-3136" y="-1717"/>
			<nail x="-2907" y="-1717"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-1810">newSpeed = (6 * ClockScaler)</label>
			<nail x="-3136" y="-1785"/>
			<nail x="-2907" y="-1785"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-1878">newSpeed = (8 * ClockScaler)</label>
			<nail x="-3136" y="-1853"/>
			<nail x="-2907" y="-1853"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-1946">newSpeed = (10 * ClockScaler)</label>
			<nail x="-3145" y="-1921"/>
			<nail x="-2907" y="-1921"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-2014">newSpeed = (12 * ClockScaler)</label>
			<nail x="-3145" y="-1989"/>
			<nail x="-2907" y="-1989"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-2082">newSpeed = (14 * ClockScaler)</label>
			<nail x="-3145" y="-2057"/>
			<nail x="-2915" y="-2057"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-3119" y="-2150">newSpeed = (16 * ClockScaler)</label>
			<nail x="-3145" y="-2125"/>
			<nail x="-2915" y="-2125"/>
		</transition>
	</template>
	<template>
		<name>Updater</name>
		<declaration>//Indexes in the three arrays represents a car. So posx[0], posy[0] and route[0] is car 0. 

int length[N] = {30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30};
int width[N] = {20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};
int startposx[N] = {6080,5700,4920,5050,4950,5090,5220,5330,5080,4500,5080,5080,4920,5080,5050,4920,4950,5050,6390,4920,4950,4130,4920,5080,3930,5920,3940,4410,4950,5080,6340,3660,5050,3660};
int startposy[N] = {5080,5080,5640,5480,6050,4920,5080,4920,5480,4920,4790,3930,4370,6380,4780,4900,4900,4220,4920,6180,5210,4920,5150,4230,4950,4920,5080,5080,6340,3650,5080,4950,3650,4920};
int posx[N];
int posy[N];
int prevPosX[N];
int prevPosY[N];
int distance[N] ;
int route[N] = {34,34,12,21,12,43,34,43,21,43,21,21,12,21,21,12,12,21,43,12,12,43,12,21,43,43,34,34,12,21,34,43,21,43};
int decel[N] = {50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
int accel[N] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
int amountOfAlreadySet = 28 ;
int stopDistance[N];
int newSpeed[N];
int currentSpeed[N];
int done[N];
int CarCounter = 0;
int AllBeenThrough = 0;
int index = 0;
int AllDone = 0;
int gapDistance = 3;
int minorGap = 0;
int CarOneCrash = 0;
int CarTwoCrash = 0;


int CrashDetected = 0;

typedef struct {
    int x;
    int y;
} point;

typedef struct {
    int CarOne;
    int CarTwo;
} CrashingCars;

point CPs[4];

void Constructor(){
    int i = 0, index = 0;

    for(i = 0; i &lt; N; i++){
        posx[i] = startposx[i];
        posy[i] = startposy[i];
        prevPosX[i] = posx[i];
        prevPosY[i] = posy[i];
        done[i] = 0;
        if(route[i] == 12){
            distance[i] = posy[i] - (500 * ClockScaler);
        }
        else if(route[i]  == 21){
            distance[i] = (500 * ClockScaler) - posy[i];
        }
        else if(route[i]  == 34){
            distance[i]  = posx[i] - (500 * ClockScaler);
        }
        else if(route[i]  == 43){
            distance[i]  = (500 * ClockScaler) - posx[i];
        }

    }
}



void UpdatePos(){
    int i = 0, j = 0;
    int checker = 1;
    for(i = 0; i &lt; amountOfAlreadySet; i++){
        if(done[i] == 0){
            distance[i] = distance[i] - (currentSpeed[i] / ClockScaler);
            if(route[i] == 12){
                prevPosY[i] = posy[i];
                posy[i] = posy[i] - (currentSpeed[i] / ClockScaler);
            }
            else if(route[i] == 21){
                prevPosY[i] = posy[i];
                posy[i] = posy[i] + (currentSpeed[i] / ClockScaler);
            }
            else if(route[i] == 34){
                prevPosX[i] = posx[i];
                posx[i] = posx[i] - (currentSpeed[i] / ClockScaler);
            }
            else if(route[i] == 43){
                prevPosX[i] = posx[i];
                posx[i] = posx[i] + (currentSpeed[i] / ClockScaler);
            }
            if(distance[i] &lt; -(140 * ClockScaler)){
                done[i] = 1;
            }
        }
    }
    for(j = 0; j &lt; amountOfAlreadySet; j++){
        if(done[j] == 0){
            checker = 0;
        }
    }
    
    if(checker){
        if(amountOfAlreadySet == N){
            AllBeenThrough = 1;
        }
    }
    AllDone = checker;
}

void CheckSpeedUpdate(){
    int i = 0;
    for(i = 0; i &lt; amountOfAlreadySet; i++){
        if(currentSpeed[i] &lt; newSpeed[i]){
            if((currentSpeed[i] + (accel[i] / ClockScaler)) &lt; newSpeed[i]){
                currentSpeed[i] = currentSpeed[i] + (accel[i] / ClockScaler);
            }
            else{
                currentSpeed[i] = newSpeed[i];
            }
        }
        if(currentSpeed[i] &gt;= newSpeed[i]){
            if((currentSpeed[i] - (decel[i] / ClockScaler)) &gt; newSpeed[i]){
                currentSpeed[i] = currentSpeed[i] - (decel[i] / ClockScaler);
            }
            else{
                currentSpeed[i] = newSpeed[i];
            }
        }
    }
}

void CheckForCrashes(){
    int i = 0, j = 0, k = 0, positive = 0;
    int highestSpeedID = 0, highestSpeed = 0;
    double delta = 0.1;
    double i_bottom_right_caronly_x, i_bottom_right_caronly_y, i_top_left_caronly_x, i_top_left_caronly_y;
    double j_bottom_right_caronly_x, j_bottom_right_caronly_y, j_top_left_caronly_x, j_top_left_caronly_y;
    bool CrashAlreadyDetected = false;

    for(i = 0; i &lt; amountOfAlreadySet; i++){
		if(route[i] == 12){
			i_bottom_right_caronly_y = posy[i] - gapDistance - delta;
			i_bottom_right_caronly_x =  posx[i] + delta + (width[i] / 2); 
			i_top_left_caronly_y = prevPosY[i] + length[i] + delta + minorGap;
			i_top_left_caronly_x =  prevPosX[i] - delta - (width[i] / 2); 
		}
		else if(route[i] == 21){
			i_bottom_right_caronly_y = prevPosY[i] - length[i] - delta - gapDistance;
			i_bottom_right_caronly_x =  prevPosX[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_y = posy[i] + minorGap + delta;
			i_top_left_caronly_x =  posx[i] - (width[i] / 2) - delta; 
		}
		else if(route[i] == 34){
			i_bottom_right_caronly_y =  prevPosY[i] - (width[i] / 2) - delta; 
			i_bottom_right_caronly_x = prevPosX[i] + length[i] + delta + gapDistance;
			i_top_left_caronly_y =  posy[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_x = posx[i] - minorGap - delta;
		}
		else if(route[i] == 43){
			i_bottom_right_caronly_y =  posy[i] - (width[i] / 2) - delta; 
			i_bottom_right_caronly_x = posx[i] + gapDistance + delta;
			i_top_left_caronly_y =  prevPosY[i] + (width[i] / 2) + delta; 
			i_top_left_caronly_x = prevPosX[i] - length[i] - delta - minorGap;
		}

        for(j = 0; j &lt; amountOfAlreadySet; j++){
             //Skips the same car and duplicates
            if(i &lt; j &amp;&amp; done[i] == 0 &amp;&amp; done[j] == 0){
                CrashAlreadyDetected = false;

				if(route[j] == 12){
					j_bottom_right_caronly_y = posy[j] - gapDistance - delta;
					j_bottom_right_caronly_x =  posx[j] + delta + (width[j] / 2); 
					j_top_left_caronly_y = prevPosY[j] + length[j] + delta + minorGap;
					j_top_left_caronly_x =  prevPosX[j] - (width[j] / 2) - delta; 
				}
				else if(route[j] == 21){
					j_bottom_right_caronly_y = prevPosY[j] - length[i] - delta - gapDistance;
					j_bottom_right_caronly_x =  prevPosX[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_y = posy[j] + minorGap + delta;
					j_top_left_caronly_x =  posx[j] - (width[j] / 2) - delta; 
				}
				else if(route[j] == 34){
					j_bottom_right_caronly_y =  prevPosY[j] - (width[j] / 2) - delta; 
					j_bottom_right_caronly_x = prevPosX[j] + length[j] + delta + gapDistance;
					j_top_left_caronly_y =  posy[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_x = posx[j] - minorGap - delta;
				}  
				else if(route[j] == 43){
					j_bottom_right_caronly_y =  posy[j] - (width[j] / 2) - delta; 
					j_bottom_right_caronly_x = posx[j] + gapDistance + delta;
					j_top_left_caronly_y =  prevPosY[j] + (width[j] / 2) + delta; 
					j_top_left_caronly_x = prevPosX[j] - length[j] - delta - minorGap;
				}

				if((i_top_left_caronly_x &gt; j_bottom_right_caronly_x) || (j_top_left_caronly_x &gt; i_bottom_right_caronly_x)){
					CrashDetected += 0;
				}
				else if((i_top_left_caronly_y &lt; j_bottom_right_caronly_y) || (j_top_left_caronly_y &lt; i_bottom_right_caronly_y)){
					CrashDetected += 0;
				}
				else {
					if(CrashAlreadyDetected == false){
						CarOneCrash = i;
						CarTwoCrash = j;
						CrashDetected += 1;
					}
					CrashAlreadyDetected = true;
				}
            }            
        }
    }
}

void SyncCarSpeed(){
    newSpeed[global_uid] = global_newSpeed;
    currentSpeed[global_uid] = global_currentSpeed;
}
</declaration>
		<location id="id6" x="-484" y="-8">
			<name x="-450" y="9">WaitingForSpeeds</name>
			<urgent/>
		</location>
		<location id="id7" x="-484" y="-110">
			<name x="-535" y="-153">CarSettingSpeed</name>
		</location>
		<location id="id8" x="-484" y="178">
			<name x="-476" y="119">CheckCrash</name>
			<urgent/>
		</location>
		<location id="id9" x="-204" y="178">
			<name x="-238" y="136">UpdateSpeed</name>
			<urgent/>
		</location>
		<location id="id10" x="25" y="178">
			<name x="-34" y="136">UpdatePosition</name>
			<urgent/>
		</location>
		<location id="id11" x="246" y="374">
			<name x="280" y="366">End</name>
		</location>
		<location id="id12" x="246" y="178">
			<name x="161" y="136">CheckDone</name>
		</location>
		<location id="id13" x="-654" y="-8">
			<name x="-680" y="9">InitState</name>
			<committed/>
		</location>
		<location id="id14" x="246" y="17">
			<name x="272" y="8">ReadyForNextCar</name>
			<urgent/>
		</location>
		<location id="id15" x="8" y="17">
			<name x="-59" y="-25">NextCarSettingSpeed</name>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id15"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-93" y="59">SpeedSet?</label>
			<label kind="assignment" x="-93" y="76">SyncCarSpeed(),
amountOfAlreadySet++</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="34" y="-8">ChooseSpeed[currentCar]!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="263" y="51">AllDone == 1 &amp;&amp; AllBeenThrough == 0</label>
			<label kind="synchronisation" x="263" y="68">go?</label>
			<label kind="assignment" x="263" y="93">Constructor()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id6"/>
			<label kind="assignment" x="-595" y="0">Constructor()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="guard" x="-187" y="382">AllDone == 0</label>
			<label kind="synchronisation" x="-128" y="357">go?</label>
			<nail x="0" y="340"/>
			<nail x="-280" y="340"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="assignment" x="59" y="187">UpdatePos()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="263" y="246">AllDone == 1  &amp;&amp; AllBeenThrough == 1</label>
			<label kind="synchronisation" x="263" y="272">go?</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="-170" y="187">CheckSpeedUpdate()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-382" y="187">CheckForCrashes()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-450" y="34">currentCar == (amountOfAlreadySet + 1)</label>
			<label kind="assignment" x="-450" y="51">amountOfAlreadySet++</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-671" y="-102">SpeedSet?</label>
			<label kind="assignment" x="-671" y="-85">SyncCarSpeed()</label>
			<nail x="-484" y="-59"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-357" y="-51">currentCar &lt; (amountOfAlreadySet + 1)</label>
			<label kind="synchronisation" x="-357" y="-76">ChooseSpeed[currentCar]!</label>
			<nail x="-382" y="-68"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

const int pid[N] = {2,0,8,7,8,2,4,5,6,7,3,4,4,1,6,8,0,3,0,9,5,9,1,1,7,3,2,9,1,6,5,0,4,2}; 
const int speed[N] = {140,160,140,140,140,150,140,140,140,140,140,140,140,160,140,120,120,140,160,160,140,120,120,140,140,160,160,160,160,160,160,160,160,160};
const int desiredSpeed[N] = {140,160,140,140,140,160,140,140,140,140,140,140,140,160,140,120,120,140,160,160,140,120,120,140,140,160,160,160,0,0,0,0,0,0};
const int maxSpeed[N] = {160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160};
const int setSpeed[N] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1};



Cars(const int[0,N-1] id) = Car(id, pid[id], speed[id], desiredSpeed[id], maxSpeed[id], setSpeed[id]);

system Cars, Timer, Updater;

</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
